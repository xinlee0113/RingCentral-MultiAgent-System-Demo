# ============================================
# 依赖库定义 - 精简版本，只保留核心必需依赖
# ============================================

[versions]
# 所有版本都从 gradle.properties 读取，不在这里定义具体版本号

[libraries]
# ============================================
# 核心Spring Boot依赖 - 必需
# ============================================
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa" }
spring-boot-starter-data-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security" }
spring-boot-starter-websocket = { module = "org.springframework.boot:spring-boot-starter-websocket" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test" }

# ============================================
# Spring Cloud - 微服务必需
# ============================================
spring-cloud-starter-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway" }
spring-cloud-starter-config = { module = "org.springframework.cloud:spring-cloud-starter-config" }
spring-cloud-starter-netflix-eureka-server = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server" }
spring-cloud-starter-netflix-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client" }

# ============================================
# Spring Security OAuth2 - 认证授权必需
# ============================================
spring-security-oauth2-client = { module = "org.springframework.security:spring-security-oauth2-client" }
spring-security-oauth2-jose = { module = "org.springframework.security:spring-security-oauth2-jose" }
spring-security-oauth2-authorization-server = { module = "org.springframework.security:spring-security-oauth2-authorization-server" }
spring-security-oauth2-resource-server = { module = "org.springframework.security:spring-security-oauth2-resource-server" }
spring-security-test = { module = "org.springframework.security:spring-security-test" }

# ============================================
# 数据库 - 核心必需
# ============================================
postgresql = { module = "org.postgresql:postgresql" }
redis-jedis = { module = "redis.clients:jedis" }
lettuce-core = { module = "io.lettuce:lettuce-core" }
h2 = { module = "com.h2database:h2" }

# ============================================
# AI核心依赖 - 轻量级必需
# ============================================
langchain4j-core = { module = "dev.langchain4j:langchain4j" }
langchain4j-openai = { module = "dev.langchain4j:langchain4j-open-ai" }
openai-java = { module = "com.theokanning.openai-gpt3-java:service" }



# ============================================
# 规则引擎 - 业务逻辑必需
# ============================================
drools-core = { module = "org.drools:drools-core" }
drools-compiler = { module = "org.drools:drools-compiler" }
drools-mvel = { module = "org.drools:drools-mvel" }

# ============================================
# 工作流引擎 - 流程管理必需
# ============================================
flowable-engine = { module = "org.flowable:flowable-engine" }
flowable-spring-boot = { module = "org.flowable:flowable-spring-boot-starter" }

# ============================================
# 网络通信 - 核心必需
# ============================================
netty-all = { module = "io.netty:netty-all" }
spring-kafka = { module = "org.springframework.kafka:spring-kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams" }
grpc-netty-shaded = { module = "io.grpc:grpc-netty-shaded" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf" }
grpc-stub = { module = "io.grpc:grpc-stub" }

# ============================================
# 序列化 - 数据处理必需
# ============================================
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind" }
gson = { module = "com.google.code.gson:gson" }
protobuf-java = { module = "com.google.protobuf:protobuf-java" }

# ============================================
# 监控观测 - 生产环境必需
# ============================================
micrometer-core = { module = "io.micrometer:micrometer-core" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus" }
micrometer-tracing-bridge-brave = { module = "io.micrometer:micrometer-tracing-bridge-brave" }
zipkin-brave = { module = "io.zipkin.brave:brave" }
zipkin-reporter-brave = { module = "io.zipkin.reporter2:zipkin-reporter-brave" }

# ============================================
# 核心测试依赖
# ============================================
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter" }
mockito-core = { module = "org.mockito:mockito-core" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql" }
testcontainers-kafka = { module = "org.testcontainers:kafka" }
testcontainers-redis = { module = "com.redis:testcontainers-redis" }
wiremock = { module = "com.github.tomakehurst:wiremock-jre8" }
rest-assured = { module = "io.rest-assured:rest-assured" }
awaitility = { module = "org.awaitility:awaitility" }
assertj = { module = "org.assertj:assertj-core" }
hamcrest = { module = "org.hamcrest:hamcrest" }

# ============================================
# 工具类 - 核心必需
# ============================================
apache-commons-lang = { module = "org.apache.commons:commons-lang3" }
guava = { module = "com.google.guava:guava" }
slf4j-api = { module = "org.slf4j:slf4j-api" }
logback-classic = { module = "ch.qos.logback:logback-classic" }
logstash-encoder = { module = "net.logstash.logback:logstash-logback-encoder" }

# ============================================
# 文档处理 - 按需启用
# ============================================
apache-poi = { module = "org.apache.poi:poi" }
apache-poi-ooxml = { module = "org.apache.poi:poi-ooxml" }
itext-core = { module = "com.itextpdf:itext7-core" }
apache-tika-core = { module = "org.apache.tika:tika-core" }
apache-tika-parsers = { module = "org.apache.tika:tika-parsers-standard-package" }
apache-pdfbox = { module = "org.apache.pdfbox:pdfbox" }

# ============================================
# Spring Boot Admin - 管理界面
# ============================================
spring-boot-admin-server = { module = "de.codecentric:spring-boot-admin-starter-server" }
spring-boot-admin-ui = { module = "de.codecentric:spring-boot-admin-server-ui" }

# ============================================
# RingCentral SDK - 自定义
# ============================================
ringcentral = { module = "com.ringcentral:ringcentral" }
ringcentral-video = { module = "com.ringcentral:ringcentral-video" }
ringcentral-voice = { module = "com.ringcentral:ringcentral-voice" }

# ============================================
# YAML处理
# ============================================
snakeyaml = { module = "org.yaml:snakeyaml" }

# Git操作
jgit = { module = "org.eclipse.jgit:org.eclipse.jgit" }

# ============================================
# 时间序列分析
# ============================================
timeseries = { module = "com.github.signaflo:timeseries" }





[bundles]
# ============================================
# 核心依赖包组合
# ============================================

# Spring Boot Web核心
spring-web = ["spring-boot-starter-web", "spring-boot-starter-actuator", "spring-boot-starter-validation"]

# 数据库核心
database = ["spring-boot-starter-data-jpa", "postgresql", "spring-boot-starter-data-redis", "lettuce-core"]

# AI核心 - 轻量级
ai-core = ["langchain4j-core", "langchain4j-openai", "openai-java"]

# 安全认证
security = ["spring-boot-starter-security", "spring-security-oauth2-client", "spring-security-oauth2-jose", "spring-security-oauth2-authorization-server"]

# 微服务核心
microservices = ["spring-cloud-starter-gateway", "spring-cloud-starter-config", "spring-cloud-starter-netflix-eureka-client"]

# 业务规则引擎
rules-engine = ["drools-core", "drools-compiler", "drools-mvel"]

# 工作流引擎
workflow = ["flowable-engine", "flowable-spring-boot"]

# 网络通信
networking = ["netty-all", "grpc-netty-shaded", "grpc-protobuf", "grpc-stub"]

# 消息队列
messaging = ["spring-kafka", "kafka-streams"]

# 监控观测
monitoring = ["micrometer-core", "micrometer-prometheus", "zipkin-brave"]

# 核心测试
testing = ["spring-boot-starter-test", "junit-jupiter", "mockito-core", "awaitility", "assertj"]

# 集成测试
testing-integration = ["testcontainers-junit", "testcontainers-postgresql", "testcontainers-kafka", "testcontainers-redis", "wiremock", "rest-assured"]

# Testcontainers全套
testcontainers-all = ["testcontainers-junit", "testcontainers-postgresql", "testcontainers-kafka", "testcontainers-redis"]

# 文档处理 - 按需启用
document-processing = ["apache-poi", "apache-poi-ooxml", "itext-core", "apache-tika-core", "apache-pdfbox"]

# 工具类
utilities = ["apache-commons-lang", "guava", "jackson-core", "jackson-databind", "gson"]

# RingCentral SDK
ringcentral-sdk = ["ringcentral", "ringcentral-video", "ringcentral-voice"]