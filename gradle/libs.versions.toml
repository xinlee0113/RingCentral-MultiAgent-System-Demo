[versions]
# Java & Kotlin
java = "17"
kotlin = "1.9.22"

# Spring Framework
spring-boot = "3.2.2"
spring-cloud = "2023.0.0"
spring-kafka = "3.1.1"
spring-security = "6.2.1"
spring-authorization-server = "1.2.2"

# Database
postgresql = "42.7.1"
redis = "4.4.6"
h2 = "2.2.224"

# AI & ML Libraries
langchain4j = "0.25.0"
openai-java = "0.18.2"
autogen = "0.2.0"
semantic-kernel = "1.0.0"
stanford-nlp = "4.5.4"
deeplearning4j = "1.0.0-M2.1"
nd4j = "1.0.0-M2.1"
drools = "8.44.0.Final"
flowable = "7.0.0"
djl = "0.25.0"
spark = "3.5.0"
smile = "3.0.2"

# Communication & Networking
netty = "4.1.106.Final"
websocket = "2.1.4"
grpc = "1.59.0"
kafka-streams = "3.6.1"

# Serialization & Data Processing
jackson = "2.16.1"
gson = "2.10.1"
protobuf = "3.25.2"

# Monitoring & Observability
micrometer = "1.12.2"
micrometer-tracing = "1.2.2"
prometheus = "1.12.2"
zipkin = "2.24.3"
zipkin-reporter = "2.16.4"

# Testing
junit = "5.10.1"
mockito = "5.8.0"
testcontainers = "1.19.3"
wiremock = "2.35.1"
rest-assured = "5.4.0"
selenium = "4.16.1"
webdrivermanager = "5.6.2"
awaitility = "4.2.0"
assertj = "3.24.2"
hamcrest = "2.2"
javafaker = "1.0.2"
jmh = "1.37"
okhttp = "4.12.0"

# Build & Deployment
jib = "3.4.0"
docker-compose = "0.17.6"

# Utilities
apache-commons = "3.14.0"
guava = "32.1.3-jre"
slf4j = "2.0.9"
logback = "1.4.14"

# Document & File Processing
apache-poi = "5.2.5"
itext = "8.0.2"
apache-tika = "2.9.1"
apache-pdfbox = "3.0.1"
jgit = "6.7.0.202309050840-r"

# Media Processing
javacv = "1.5.9"
ffmpeg = "6.0-1.5.9"

# Spring Boot Admin
spring-boot-admin = "3.2.0"

# Reporting
jasperreports = "6.20.6"
timeseries = "0.4"

# RingCentral SDK (自定义版本)
ringcentral = "3.0.0"
ringcentral-video = "1.0.0"
ringcentral-voice = "1.0.0"

# Lettuce Redis
lettuce = "6.3.1.RELEASE"

# Logstash
logstash-encoder = "7.4"

# YAML Processing
snakeyaml = "2.2"

[libraries]
# Spring Boot Starters
spring-boot-starter-web = { module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot" }
spring-boot-starter-data-jpa = { module = "org.springframework.boot:spring-boot-starter-data-jpa", version.ref = "spring-boot" }
spring-boot-starter-data-redis = { module = "org.springframework.boot:spring-boot-starter-data-redis", version.ref = "spring-boot" }
spring-boot-starter-security = { module = "org.springframework.boot:spring-boot-starter-security", version.ref = "spring-boot" }
spring-boot-starter-websocket = { module = "org.springframework.boot:spring-boot-starter-websocket", version.ref = "spring-boot" }
spring-boot-starter-actuator = { module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot" }
spring-boot-starter-validation = { module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot" }
spring-boot-starter-test = { module = "org.springframework.boot:spring-boot-starter-test", version.ref = "spring-boot" }

# Spring Cloud
spring-cloud-starter-gateway = { module = "org.springframework.cloud:spring-cloud-starter-gateway" }
spring-cloud-starter-config = { module = "org.springframework.cloud:spring-cloud-starter-config" }
spring-cloud-starter-netflix-eureka-server = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-server" }
spring-cloud-starter-netflix-eureka-client = { module = "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client" }

# Spring Security OAuth2
spring-security-oauth2-client = { module = "org.springframework.security:spring-security-oauth2-client", version.ref = "spring-security" }
spring-security-oauth2-jose = { module = "org.springframework.security:spring-security-oauth2-jose", version.ref = "spring-security" }
spring-security-oauth2-authorization-server = { module = "org.springframework.security:spring-security-oauth2-authorization-server", version.ref = "spring-authorization-server" }
spring-security-oauth2-resource-server = { module = "org.springframework.security:spring-security-oauth2-resource-server", version.ref = "spring-security" }
spring-security-test = { module = "org.springframework.security:spring-security-test", version.ref = "spring-security" }

# Database
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
redis-jedis = { module = "redis.clients:jedis", version.ref = "redis" }
h2 = { module = "com.h2database:h2", version.ref = "h2" }

# AI & ML
langchain4j-core = { module = "dev.langchain4j:langchain4j", version.ref = "langchain4j" }
langchain4j-openai = { module = "dev.langchain4j:langchain4j-open-ai", version.ref = "langchain4j" }
openai-java = { module = "com.theokanning.openai-gpt3-java:service", version.ref = "openai-java" }
stanford-nlp-core = { module = "edu.stanford.nlp:stanford-corenlp", version.ref = "stanford-nlp" }
stanford-nlp-models = { module = "edu.stanford.nlp:stanford-corenlp", version.ref = "stanford-nlp" }
deeplearning4j-core = { module = "org.deeplearning4j:deeplearning4j-core", version.ref = "deeplearning4j" }
nd4j-native = { module = "org.nd4j:nd4j-native-platform", version.ref = "nd4j" }
drools-core = { module = "org.drools:drools-core", version.ref = "drools" }
drools-compiler = { module = "org.drools:drools-compiler", version.ref = "drools" }
drools-mvel = { module = "org.drools:drools-mvel", version.ref = "drools" }
flowable-engine = { module = "org.flowable:flowable-engine", version.ref = "flowable" }
flowable-spring-boot = { module = "org.flowable:flowable-spring-boot-starter", version.ref = "flowable" }
djl-api = { module = "ai.djl:api", version.ref = "djl" }
djl-tokenizers = { module = "ai.djl.huggingface:tokenizers", version.ref = "djl" }
spark-core = { module = "org.apache.spark:spark-core_2.13", version.ref = "spark" }
spark-sql = { module = "org.apache.spark:spark-sql_2.13", version.ref = "spark" }
spark-streaming = { module = "org.apache.spark:spark-streaming_2.13", version.ref = "spark" }
spark-mllib = { module = "org.apache.spark:spark-mllib_2.13", version.ref = "spark" }
smile-core = { module = "smile:smile-core", version.ref = "smile" }

# Networking
netty-all = { module = "io.netty:netty-all", version.ref = "netty" }
netty-transport-native-epoll = { module = "io.netty:netty-transport-native-epoll", version.ref = "netty" }
spring-kafka = { module = "org.springframework.kafka:spring-kafka", version.ref = "spring-kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka-streams" }
grpc-netty-shaded = { module = "io.grpc:grpc-netty-shaded", version.ref = "grpc" }
grpc-protobuf = { module = "io.grpc:grpc-protobuf", version.ref = "grpc" }
grpc-stub = { module = "io.grpc:grpc-stub", version.ref = "grpc" }

# Serialization
jackson-core = { module = "com.fasterxml.jackson.core:jackson-core", version.ref = "jackson" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
protobuf-java = { module = "com.google.protobuf:protobuf-java", version.ref = "protobuf" }

# Monitoring
micrometer-core = { module = "io.micrometer:micrometer-core", version.ref = "micrometer" }
micrometer-prometheus = { module = "io.micrometer:micrometer-registry-prometheus", version.ref = "prometheus" }
micrometer-tracing-bridge-brave = { module = "io.micrometer:micrometer-tracing-bridge-brave", version.ref = "micrometer-tracing" }
zipkin-brave = { module = "io.zipkin.brave:brave", version.ref = "zipkin" }
zipkin-reporter-brave = { module = "io.zipkin.reporter2:zipkin-reporter-brave", version.ref = "zipkin-reporter" }

# Testing
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-elasticsearch = { module = "org.testcontainers:elasticsearch", version.ref = "testcontainers" }
testcontainers-redis = { module = "com.redis:testcontainers-redis", version = "2.2.4" }
testcontainers-nginx = { module = "org.testcontainers:nginx", version.ref = "testcontainers" }
wiremock = { module = "com.github.tomakehurst:wiremock-jre8", version.ref = "wiremock" }
rest-assured = { module = "io.rest-assured:rest-assured", version.ref = "rest-assured" }
rest-assured-json = { module = "io.rest-assured:json-path", version.ref = "rest-assured" }
rest-assured-xml = { module = "io.rest-assured:xml-path", version.ref = "rest-assured" }
selenium = { module = "org.seleniumhq.selenium:selenium-java", version.ref = "selenium" }
webdrivermanager = { module = "io.github.bonigarcia:webdrivermanager", version.ref = "webdrivermanager" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
hamcrest = { module = "org.hamcrest:hamcrest", version.ref = "hamcrest" }
javafaker = { module = "com.github.javafaker:javafaker", version.ref = "javafaker" }
jmh-core = { module = "org.openjdk.jmh:jmh-core", version.ref = "jmh" }
jmh-generator = { module = "org.openjdk.jmh:jmh-generator-annprocess", version.ref = "jmh" }
okhttp-mockwebserver = { module = "com.squareup.okhttp3:mockwebserver", version.ref = "okhttp" }

# Utilities
apache-commons-lang = { module = "org.apache.commons:commons-lang3", version.ref = "apache-commons" }
guava = { module = "com.google.guava:guava", version.ref = "guava" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }

# Document & File Processing
apache-poi = { module = "org.apache.poi:poi", version.ref = "apache-poi" }
apache-poi-ooxml = { module = "org.apache.poi:poi-ooxml", version.ref = "apache-poi" }
itext-core = { module = "com.itextpdf:itext7-core", version.ref = "itext" }
apache-tika-core = { module = "org.apache.tika:tika-core", version.ref = "apache-tika" }
apache-tika-parsers = { module = "org.apache.tika:tika-parsers-standard-package", version.ref = "apache-tika" }
apache-pdfbox = { module = "org.apache.pdfbox:pdfbox", version.ref = "apache-pdfbox" }
jgit = { module = "org.eclipse.jgit:org.eclipse.jgit", version.ref = "jgit" }

# Media Processing
javacv-platform = { module = "org.bytedeco:javacv-platform", version.ref = "javacv" }
ffmpeg-platform = { module = "org.bytedeco:ffmpeg-platform", version.ref = "ffmpeg" }

# Spring Boot Admin
spring-boot-admin-server = { module = "de.codecentric:spring-boot-admin-starter-server", version.ref = "spring-boot-admin" }
spring-boot-admin-ui = { module = "de.codecentric:spring-boot-admin-server-ui", version.ref = "spring-boot-admin" }

# Reporting
jasperreports = { module = "net.sf.jasperreports:jasperreports", version.ref = "jasperreports" }
timeseries = { module = "com.github.signaflo:timeseries", version.ref = "timeseries" }

# RingCentral SDK (自定义)
ringcentral = { module = "com.ringcentral:ringcentral", version.ref = "ringcentral" }
ringcentral-video = { module = "com.ringcentral:ringcentral-video", version.ref = "ringcentral-video" }
ringcentral-voice = { module = "com.ringcentral:ringcentral-voice", version.ref = "ringcentral-voice" }

# Redis
lettuce-core = { module = "io.lettuce:lettuce-core", version.ref = "lettuce" }

# Logstash
logstash-encoder = { module = "net.logstash.logback:logstash-logback-encoder", version.ref = "logstash-encoder" }

# YAML Processing
snakeyaml = { module = "org.yaml:snakeyaml", version.ref = "snakeyaml" }

[bundles]
# Spring Boot Web Bundle
spring-web = ["spring-boot-starter-web", "spring-boot-starter-actuator"]

# Database Bundle
database = ["spring-boot-starter-data-jpa", "postgresql", "spring-boot-starter-data-redis"]

# AI Bundle
ai-core = ["langchain4j-core", "langchain4j-openai", "openai-java"]

# Testing Bundle
testing = ["spring-boot-starter-test", "junit-jupiter", "mockito-core", "testcontainers-junit"]

# Testing Extended Bundle
testing-extended = ["spring-boot-starter-test", "junit-jupiter", "mockito-core", "awaitility", "rest-assured", "wiremock", "assertj", "hamcrest"]

# Testcontainers Bundle
testcontainers-all = ["testcontainers-junit", "testcontainers-postgresql", "testcontainers-kafka", "testcontainers-redis"]

# Monitoring Bundle
monitoring = ["micrometer-core", "micrometer-prometheus", "zipkin-brave"]

# AI/ML Bundle
ai-nlp = ["stanford-nlp-core", "deeplearning4j-core", "nd4j-native"]

# Rules Engine Bundle
rules-engine = ["drools-core", "drools-compiler", "drools-mvel"]

# Document Processing Bundle
document-processing = ["apache-poi", "apache-poi-ooxml", "itext-core", "apache-tika-core", "apache-tika-parsers"]

# Media Processing Bundle
media-processing = ["javacv-platform", "ffmpeg-platform"]

# Networking Bundle
networking = ["netty-all", "grpc-netty-shaded", "grpc-protobuf", "grpc-stub"]

# Analytics Bundle
analytics = ["spark-core", "spark-sql", "spark-mllib", "smile-core"]

[plugins]
# Kotlin
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-spring = { id = "org.jetbrains.kotlin.plugin.spring", version.ref = "kotlin" }
kotlin-jpa = { id = "org.jetbrains.kotlin.plugin.jpa", version.ref = "kotlin" }

# Spring
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version = "1.1.4" }

# Build & Deployment
jib = { id = "com.google.cloud.tools.jib", version.ref = "jib" }
docker-compose = { id = "com.avast.gradle.docker-compose", version.ref = "docker-compose" }

# Code Quality
spotless = { id = "com.diffplug.spotless", version = "6.23.3" }
detekt = { id = "io.gitlab.arturbosch.detekt", version = "1.23.4" } 