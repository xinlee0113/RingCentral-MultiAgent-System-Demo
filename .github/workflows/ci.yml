name: RingCentral MultiAgent System CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: '-Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.workers.max=4'

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run code quality checks
        run: |
          ./gradlew check --parallel --build-cache --configuration-cache

  # 快速构建和单元测试
  fast-build:
    name: Fast Build
    runs-on: ubuntu-latest
    needs: code-quality
    strategy:
      matrix:
        service: [
          # 核心模块
          shared, infrastructure,
          # 平台服务
          api-gateway, auth-service, config-service, monitor-service,
          # 智能体服务  
          meeting-agent, call-agent, router-agent, analytics-agent,
          # AI引擎
          speech-engine, nlu-engine, knowledge-engine, reasoning-engine
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build service
        run: |
          case "${{ matrix.service }}" in
            "shared"|"infrastructure")
              echo "Building core module: ${{ matrix.service }}"
              ./gradlew :${{ matrix.service }}:build --parallel --build-cache --no-configuration-cache
              ;;
            "api-gateway"|"auth-service"|"config-service"|"monitor-service")
              echo "Building platform service: ${{ matrix.service }}"
              ./gradlew :platform-services:${{ matrix.service }}:build --parallel --build-cache --no-configuration-cache
              ;;
            "meeting-agent"|"call-agent"|"router-agent"|"analytics-agent")
              echo "Building agent service: ${{ matrix.service }}"
              ./gradlew :agent-services:${{ matrix.service }}:build --parallel --build-cache --no-configuration-cache
              ;;
            "speech-engine"|"nlu-engine"|"knowledge-engine"|"reasoning-engine")
              echo "Building AI engine: ${{ matrix.service }}"
              ./gradlew :ai-engines:${{ matrix.service }}:build --parallel --build-cache --no-configuration-cache
              ;;
            *)
              echo "Unknown service: ${{ matrix.service }}"
              exit 1
              ;;
          esac

      - name: Upload build reports
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: build-reports-${{ matrix.service }}
          path: |
            **/build/reports/
            **/build/test-results/

  # 单元测试
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: fast-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: |
          ./gradlew :tests:unit-tests:test --parallel --build-cache --no-configuration-cache

      - name: Upload unit test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-reports
          path: |
            tests/unit-tests/build/reports/
            tests/unit-tests/build/test-results/

  # 集成测试
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ringcentral_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run integration tests
        env:
          SPRING_PROFILES_ACTIVE: test
          DATABASE_URL: jdbc:postgresql://localhost:5432/ringcentral_test
          REDIS_URL: redis://localhost:6379
        run: |
          ./gradlew :tests:integration-tests:test --parallel --build-cache --no-configuration-cache

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-reports
          path: |
            tests/integration-tests/build/reports/
            tests/integration-tests/build/test-results/

  # 端到端测试
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run E2E tests
        run: |
          ./gradlew :tests:e2e-tests:test --parallel --build-cache --no-configuration-cache

      - name: Upload E2E test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-reports
          path: |
            tests/e2e-tests/build/reports/
            tests/e2e-tests/build/test-results/

  # 代码覆盖率和质量分析
  sonar-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache SonarQube packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          # 运行构建和测试覆盖率报告
          ./gradlew build jacocoTestReport --parallel --build-cache --no-configuration-cache
          
          # 检查SonarQube token是否存在并且有效
          echo "Checking SONAR_TOKEN..."
          if [ -z "$SONAR_TOKEN" ]; then
            echo "❌ SONAR_TOKEN is not set, skipping SonarQube analysis"
            exit 0
          elif [ "$SONAR_TOKEN" = "mock-token" ]; then
            echo "❌ SONAR_TOKEN is mock token, skipping SonarQube analysis"
            exit 0
          elif [ ${#SONAR_TOKEN} -lt 10 ]; then
            echo "❌ SONAR_TOKEN appears to be invalid (too short), skipping SonarQube analysis"
            exit 0
          else
            echo "✅ SONAR_TOKEN is configured, running SonarQube analysis..."
            echo "Token length: ${#SONAR_TOKEN}"
            
            # 运行SonarQube分析
            ./gradlew sonarqube --info --no-configuration-cache --stacktrace \
              -Dsonar.token="$SONAR_TOKEN" \
              -Dsonar.host.url="https://sonarcloud.io" \
              -Dsonar.projectKey="xinlee0113_RingCentral-MultiAgent-System-Demo" \
              -Dsonar.organization="xinlee0113"
          fi

  # Docker镜像构建
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push'
    timeout-minutes: 30
    strategy:
      matrix:
        service: [
          # 平台服务
          api-gateway, auth-service, config-service, monitor-service,
          # 智能体服务  
          meeting-agent, call-agent, router-agent, analytics-agent,
          # AI引擎
          speech-engine, nlu-engine, knowledge-engine, reasoning-engine
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          echo "Building Docker image for service: ${{ matrix.service }}"
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Registry: ghcr.io"
          
          # 定义重试函数
          retry_docker_build() {
            local max_attempts=3
            local attempt=1
            local gradle_task="$1"
            
            while [ $attempt -le $max_attempts ]; do
              echo "🔄 Attempt $attempt of $max_attempts for $gradle_task"
              
              if $gradle_task --no-configuration-cache --no-parallel --stacktrace; then
                echo "✅ Docker build succeeded on attempt $attempt"
                return 0
              else
                echo "❌ Docker build failed on attempt $attempt"
                if [ $attempt -lt $max_attempts ]; then
                  echo "⏳ Waiting 30 seconds before retry..."
                  sleep 30
                  # 清理可能的缓存问题
                  ./gradlew clean --no-configuration-cache
                fi
                attempt=$((attempt + 1))
              fi
            done
            
            echo "💥 Docker build failed after $max_attempts attempts"
            return 1
          }
          
          case "${{ matrix.service }}" in
            "api-gateway"|"auth-service"|"config-service"|"monitor-service")
              echo "Building platform service: ${{ matrix.service }}"
              retry_docker_build "./gradlew :platform-services:${{ matrix.service }}:jib"
              ;;
            "meeting-agent"|"call-agent"|"router-agent"|"analytics-agent")
              echo "Building agent service: ${{ matrix.service }}"
              retry_docker_build "./gradlew :agent-services:${{ matrix.service }}:jib"
              ;;
            "speech-engine"|"nlu-engine"|"knowledge-engine"|"reasoning-engine")
              echo "Building AI engine: ${{ matrix.service }}"
              retry_docker_build "./gradlew :ai-engines:${{ matrix.service }}:jib"
              ;;
            *)
              echo "Unknown service: ${{ matrix.service }}"
              exit 1
              ;;
          esac

  # 部署到开发环境
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: development
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup kind (Kubernetes in Docker)
        uses: helm/kind-action@v1.8.0
        with:
          cluster_name: ringcentral-dev
          node_image: kindest/node:v1.28.0

      - name: Wait for cluster to be ready
        run: |
          echo "Waiting for cluster to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          
      - name: Verify Kubernetes cluster
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get namespaces

      - name: Load Docker images to kind cluster
        run: |
          # 将构建的镜像加载到kind集群中
          services=(
            "api-gateway" "auth-service" "config-service" "monitor-service"
            "meeting-agent" "call-agent" "router-agent" "analytics-agent"
            "speech-engine" "nlu-engine" "knowledge-engine" "reasoning-engine"
          )
          for service in "${services[@]}"; do
            echo "Loading image for $service..."
            # 从GitHub Container Registry拉取镜像并加载到kind
            docker pull ghcr.io/xinlee0113/ringcentral-multiagent-system/$service:1.0.0 || echo "Image not found, skipping $service"
            kind load docker-image ghcr.io/xinlee0113/ringcentral-multiagent-system/$service:1.0.0 --name ringcentral-dev || echo "Failed to load $service"
          done

      - name: Deploy to development environment
        env:
          GITHUB_SHA: ${{ github.sha }}
          NAMESPACE: ringcentral-dev
          REGISTRY: ghcr.io/xinlee0113/ringcentral-multiagent-system
          USE_KIND: "true"
        run: |
          chmod +x scripts/deploy-dev.sh
          ./scripts/deploy-dev.sh

      - name: Verify deployment
        run: |
          kubectl get pods -n ringcentral-dev
          kubectl get services -n ringcentral-dev
          kubectl get ingress -n ringcentral-dev

      - name: Get access URLs
        run: |
          echo "🌐 部署完成! 访问地址:"
          echo "  API Gateway: http://dev-api.ringcentral.local"
          echo "  Auth Service: http://dev-auth.ringcentral.local"
          echo "  Meeting Agent: http://dev-meeting.ringcentral.local"
          echo "  Call Agent: http://dev-call.ringcentral.local"

  # 部署到生产环境
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [e2e-tests, sonar-analysis]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Setup Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_PROD }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Deploy to production environment
        env:
          GITHUB_SHA: ${{ github.sha }}
          NAMESPACE: ringcentral-prod
          REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
        run: |
          chmod +x scripts/deploy-prod.sh
          ./scripts/deploy-prod.sh

      - name: Verify deployment
        run: |
          kubectl get pods -n ringcentral-prod
          kubectl get services -n ringcentral-prod
          kubectl get ingress -n ringcentral-prod

      - name: Send deployment notification
        if: success()
        run: |
          echo "🎉 生产环境部署成功!"
          echo "版本: ${{ github.sha }}"
          echo "时间: $(date)"

  # 性能测试
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run performance tests
        run: |
          ./gradlew :tests:performance-tests:test --parallel --build-cache --configuration-cache

      - name: Upload performance test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-reports
          path: |
            tests/performance-tests/build/reports/
            tests/performance-tests/build/test-results/ 